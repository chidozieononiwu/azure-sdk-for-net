steps:
  - pwsh: |
      Invoke-WebRequest -Uri "https://github.com/dotnet/docfx/releases/download/v2.43.2/docfx.zip" `
      -OutFile "docfx.zip" | Wait-Process; Expand-Archive -Path "docfx.zip" -DestinationPath "./docfx/"
    workingDirectory: $(Build.BinariesDirectory)
    displayName: Download and Extract DocFX
  - task: CmdLine@2
    displayName: Provision DocFX Directory
    inputs:
      script: $(Build.BinariesDirectory)/docfx/docfx.exe init -q
      workingDirectory: $(Build.SourcesDirectory)
      failOnStderr: true
  - pwsh: New-Item -Path . -Name "templates" -ItemType "directory"
    displayName: Create Template Directory
    workingDirectory: $(Build.SourcesDirectory)/docfx_project/
  - task: CopyFiles@2
    displayName: Copy Template to templates folder
    inputs:
      sourceFolder: $(Build.SourcesDirectory)/eng/docgeneration/templates
      content: '**\*'
      targetFolder: $(Build.SourcesDirectory)/docfx_project/templates
      overWrite: true
  - pwsh: ls
    workingDirectory: $(Build.SourcesDirectory)/docfx_project/
  - pwsh: ls
    workingDirectory: $(Build.SourcesDirectory)/docfx_project/templates
  - pwsh: |
      Copy-Item "$(Build.SourcesDirectory)/eng/docgeneration/docfx.json" -Destination "$(Build.SourcesDirectory)/docfx_project/" -Force
    displayName: Copy over docfx.json
  - pwsh: |
      $ServiceList = Get-ChildItem "$(Build.SourcesDirectory)/sdk" -Directory -Exclude eng, mgmtcommon, template
      $YmlPath = "$(Build.SourcesDirectory)/docfx_project/api"
      New-Item -Path $YmlPath -Name "toc.yml" -Force
      Add-Content -Path "$($YmlPath)/toc.yml" -Value "- uid: Client Libraries`r`n  name: Client Libraries`r`n  items:"
      foreach ($Dir in $ServiceList)
      {
          $PkgList = Get-ChildItem $Dir.FullName -Directory | Where-Object -FilterScript {$_.Name -notmatch ".Management."}
          if (($PkgList | Measure-Object).count -eq 0)
          {
              continue
          }
          Add-Content -Path "$($YmlPath)/toc.yml" -Value "  - uid: $($Dir.Name)`r`n    name: $($Dir.Name.ToUpper())`r`n    items:"
          foreach ($Pkg in $PkgList)
          {
              Add-Content -Path "$($YmlPath)/toc.yml" -Value "    - name: $($Pkg.Name)`r`n      href: $($Pkg.Name).md"
              New-Item -Path $YmlPath -Name "$($Pkg.Name).md" -Force
              Add-Content -Path "$($YmlPath)/$($Pkg.Name).md" -Value "# $($Pkg.Name)"
              Add-Content -Path "$($YmlPath)/$($Pkg.Name).md" -Value "## PUBLISHED VERSIONS"

          }
      }
      Add-Content -Path "$($YmlPath)/toc.yml" -Value "- uid: Management Libraries`r`n  name: Management Libraries`r`n  items:"
      foreach ($Dir in $ServiceList)
      {
          $PkgList = Get-ChildItem $Dir.FullName -Directory | Where-Object -FilterScript {$_.Name -match ".Management."}
          if (($PkgList | Measure-Object).count -eq 0)
          {
              continue
          }
          Add-Content -Path "$($YmlPath)/toc.yml" -Value "  - uid: $($Dir.Name)`r`n    name: $($Dir.Name.ToUpper())`r`n    items:"
          foreach ($Pkg in $PkgList)
          {
              Add-Content -Path "$($YmlPath)/toc.yml" -Value "    - name: $($Pkg.Name)`r`n      href: $($Pkg.Name).md"
              New-Item -Path $YmlPath -Name "$($Pkg.Name).md" -Force
              Add-Content -Path "$($YmlPath)/$($Pkg.Name).md" -Value "# $($Pkg.Name)"
              Add-Content -Path "$($YmlPath)/$($Pkg.Name).md" -Value "## PUBLISHED VERSIONS"
          }
      }
    displayName: Create Index Toc
  - pwsh: ls
    workingDirectory: $(Build.SourcesDirectory)/docfx_project/api
  - task: CmdLine@2
    displayName: Build Doc Content
    inputs:
      script: $(Build.BinariesDirectory)/docfx/docfx.exe build
      workingDirectory: $(Build.SourcesDirectory)/docfx_project/
      failOnStderr: true
  - pwsh: |
      Copy-Item "$(Build.SourcesDirectory)/eng/docgeneration/assets/*" -Destination "$(Build.SourcesDirectory)/docfx_project/_site/" -Force
    displayName: Replace site assets
  - task: CopyFiles@2
    displayName: Copy HTML to Artifacts Directory
    inputs:
      sourceFolder: $(Build.SourcesDirectory)/docfx_project/
      content: '**\*'
      targetFolder: $(Build.ArtifactStagingDirectory)/docfx_project
      overWrite: true
  - task: PublishPipelineArtifact@0
    condition: succeeded()
    inputs:
      artifactName: "Doc.Index"
      targetPath: $(Build.ArtifactStagingDirectory)/docfx_project/_site
<#
.SYNOPSIS
Structure-DocfxSite arranges the metadata Yml files generated by docfx into directories and creates linking toc.yml
.PARAMETER ApiDirPath
The path to the directory containing docfx generated metadata yml
#>
param (
    $SourceDirectory # the Repo Source
)

$IndexDirectory = "$($SourceDirectory)\docfx_project"
$ApiDirPath = "$($IndexDirectory)\api"
$ArticlesDirectory = "$($IndexDirectory)\articles"

$MATCH_TWO = "(?<packagename>^.*?\..*?)\..*" # e.g. Azure.Identity
$MATCH_THREE = "(?<packagename>^.*?\..*?\..*?)\..*" # e.g. Azure.Messaging.EventHubs
$UID_MATCH_TWO = "^- uid: (?<packagename>.*?\..*?)($|\..*)" # e.g. - uid: Azure.Identity
$UID_MATCH_THREE = "^- uid: (?<packagename>.*?\..*?\..*?)($|\..*)" # e.g. - uid: Microsoft.Azure.ApplicationInsights.Query

$FileToFolderMap = @{
    "Azure.ApplicationModel.Configuration"="ApplicationModel.Configuration";
    "Azure.Identity"="Identity";
    "Azure.Messaging.EventHubs"="EventHubs";
    "Microsoft.Azure.EventHubs"="EventHubs";
    "Azure.Security.KeyVault"="KeyVault";
    "Microsoft.Azure.KeyVault"="KeyVault";
    "Azure.Storage"="Storage";
    "Microsoft.Azure.ApplicationInsights"="ApplicationInsights";
    "Microsoft.Azure.Batch"="Batch";
    "Microsoft.Azure.CognitiveServices"="CognitiveServices";
    "Microsoft.Azure.ContainerRegistry"="ContainerRegistry";
    "Microsoft.Azure.EventGrid"="EventGrid";
    "Microsoft.Azure.Graph"="Graph.RBAC";
    "Microsoft.Azure.HDInsight"="HDInsight";
    "Microsoft.Azure.OperationalInsights"="OperationalInsights";
    "Microsoft.Azure.Search"="Search";
    "Microsoft.Azure.ServiceBus"="ServiceBus";
    "Azure.Core"="Core"
}

# Service Directory Names
$DirectoryNames = $FileToFolderMap.Values;

# Arranges the Yml files into seperate directory
# Results in APIs being grouped by directory in Doc Site
function ArrangeYmlFiles()
{
    foreach ($DirName in $DirectoryNames) {
        Write-Host "Create Directory: - $($DirName)"
        New-Item -Path $ApiDirPath -ItemType "directory" -Name $DirName -Force
    }

    Write-Host "Create Directory: - OtherAPIs"
    New-Item -Path $ApiDirPath -ItemType "directory" -Name "OtherAPIs" -Force

    # Copy Yml files into directories
    [array]$YmlAPIFiles = Get-ChildItem -Path $ApiDirPath -Recurse -File -Exclude toc.yml, .manifest, .gitignore, index.md


    foreach ($File in $YmlAPIFiles){
        # Check for match in first 3 words in the packagename seperated by dots
        # Match packages like Azure.Messaging.EventHubs.*
        if ($File.Name -match $MATCH_THREE) {
            $PkgName = $Matches["packagename"]
        
            if (![String]::IsNullOrEmpty($FileToFolderMap[$PkgName])) {
                $PkgDirPath = Join-Path -Path $ApiDirPath -ChildPath $FileToFolderMap[$PkgName]
                Move-Item -Path $File -Destination $PkgDirPath
                Write-Host " Moved $($File.BaseName) to --> $($PkgName)"
                continue
            }
        }

        # Check for match in first 2 words in the packagename seperated by dots
        # Match packages like Azure.Identity.*
        if ($File.Name -match $MATCH_TWO) {
            $PkgName = $Matches["packagename"]
        
            if (![String]::IsNullOrEmpty($FileToFolderMap[$PkgName])) {
                $PkgDirPath = Join-Path -Path $ApiDirPath -ChildPath $FileToFolderMap[$PkgName]
                Move-Item -Path $File -Destination $PkgDirPath
                Write-Host " Moved $($File.BaseName) to --> $($PkgName)"
                continue
            }
        }

        $PkgDirPath = Join-Path -Path $ApiDirPath -ChildPath "OtherAPIs"
        Write-Host " Moved $($File.BaseName) to --> OtherAPIs"
        Move-Item -Path $File -Destination $PkgDirPath
    }
}

# Seperates the main toc.yml into toc.yml for different directories
# Rewrites the main toc.yml to link to toc.yml in different directories
function CreateTocYmlForAPI()
{
    foreach ($dir in $DirectoryNames) {
        New-Item -Path "$($ApiDirPath)/$($dir)" -Name "toc.yml" -Force
    }


    $TocYmlContent = Get-Content "$($ApiDirPath)/toc.yml"
    $CurrentTocFile = $null

    # Read from Main toc.yml the write into toc.yml for each directory
    foreach ($Item in $TocYmlContent) {
        if ($Item.StartsWith('#')) { continue }
        if ($Item.StartsWith('-')) 
        {
            # Match e.g. Azure.Messaging.EventHubs
            if ($Item -match $UID_MATCH_THREE) {
                $PkgName = $Matches["packagename"]
                if (![String]::IsNullOrEmpty($FileToFolderMap[$PkgName])) {
                    $PkgDirPath = $FileToFolderMap[$PkgName]
                    $CurrentTocFile = "$($ApiDirPath)/$($PkgDirPath)/toc.yml"
                    Add-Content -Path $CurrentTocFile -Value $Item
                    Write-Host "Write $($Item) to --> $($PkgDirPath)/toc.yml"
                    continue
                }
            }

            # Match e.g. Azure.Identity
            if ($Item -match $UID_MATCH_TWO) {
                $PkgName = $Matches["packagename"]
                if (![String]::IsNullOrEmpty($FileToFolderMap[$PkgName])) {
                    $PkgDirPath = $FileToFolderMap[$PkgName]
                    $CurrentTocFile = "$($ApiDirPath)/$($PkgDirPath)/toc.yml"
                    Add-Content -Path $CurrentTocFile -Value $Item
                    Write-Host "Write $($Item) to --> $($PkgDirPath)/toc.yml"
                    continue
                }
            }
            # Write to OtherApis/toc.yml
            else {
                $CurrentTocFile = "$($ApiDirPath)/OtherAPIs/toc.yml"
                Add-Content -Path $CurrentTocFile -Value $Item
                Write-Host "Write $($Item) to --> OtherAPIs/toc.yml"
            }
        }
        # Write to the last toc.yml written to
        else{
            Add-Content -Path $CurrentTocFile -Value $Item
            Write-Host "Write $($Item) to --> Current toc.yml"
        }
    }

    # Delete then recreate the main toc.yml
    $DirectoryNames = $FileToFolderMap.Values | Sort;

    Remove-Item -Path "$($ApiDirPath)/toc.yml" -Force
    New-Item -Path $($ApiDirPath) -Name "toc.yml"

    foreach ($Dir in $DirectoryNames) {
        Add-Content -Path "$($ApiDirPath)/toc.yml" -Value "- name: $($Dir)"
        Add-Content -Path "$($ApiDirPath)/toc.yml" -Value "  href: $($Dir)/toc.yml"
    }
    
    Add-Content -Path "$($ApiDirPath)/toc.yml" -Value "- name: OtherAPIs"
    Add-Content -Path "$($ApiDirPath)/toc.yml" -Value "  href: OtherAPIs/toc.yml"
}

# Copy over markdown files in the repo
# Create toc.yml file to link to .md files
function StructureReadmes() {
    # Get all readmes readme files into an array
    [Array]$MdFiles = Get-ChildItem -Path $SourceDirectory -Filter *.md
    $MdFiles += Get-ChildItem -Path "$($SourceDirectory)/Documentation" -Filter *.md

    foreach ($Dir in $DirectoryNames) {
        $MdFiles += Get-ChildItem -Path "$($SourceDirectory)/sdk/$($Dir)" -Filter *.md -Recurse
    }

    # Delete Articles toc.yml
    Remove-Item -Path "$($ArticlesDirectory)/toc.yml" -Force
    New-Item -Path $($ArticlesDirectory) -Name "toc.yml"

    # Copy Over ReadMe and create toc.yml file
    foreach ($File in $MdFiles) {
        Write-Host "Copy $($File.Name) to --> $($File.FullName)"
        $FileName = $File.FullName.Replace($SourceDirectory, "")
        $FileName = $FileName.Replace("\", "/")
        New-Item -Type File -Path "$($ArticlesDirectory)/$($FileName)" -Force
        Copy-Item -Path $File.FullName -Destination "$($ArticlesDirectory)/$($FileName)" -Recurse -Force
        Add-Content -Path "$($ArticlesDirectory)/toc.yml" -Value "- name: $($FileName.Substring(1, $FileName.Length - 4))"
        Add-Content -Path "$($ArticlesDirectory)/toc.yml" -Value "  href: $($FileName.Substring(1))"
        Write-Host "- name: $($FileName.Substring(1, $FileName.Length - 4))"
        Write-Host "  href: $($FileName.Substring(1))"
    }
}

# Create index/toc.yml
function CreateMainTocFile() {

    # Delete Articles toc.yml
    Remove-Item -Path "$($IndexDirectory)/toc.yml" -Force
    New-Item -Path $($IndexDirectory) -Name "toc.yml"

    Add-Content -Path "$($IndexDirectory)/toc.yml" -Value "- name: Api Documentation"
    Add-Content -Path "$($IndexDirectory)/toc.yml" -Value "  href: api/"
    Add-Content -Path "$($IndexDirectory)/toc.yml" -Value "- name: User Documentation"
    Add-Content -Path "$($IndexDirectory)/toc.yml" -Value "  href: articles/"
    Add-Content -Path "$($IndexDirectory)/toc.yml" -Value "  homepage: articles/CONTRIBUTING.md"
}

ArrangeYmlFiles
CreateTocYmlForAPI
StructureReadmes
CreateMainTocFile


